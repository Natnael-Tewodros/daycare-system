generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id
  name         String
  username     String?  @unique
  email        String   @unique
  password     String
  role         UserRole @default(ADMIN)
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  
  // Parent relationship
  children     Child[]  @relation("ParentChildren")
}

enum UserRole {
  ADMIN
  PARENT
}

model Child {
  id           Int          @id @default(autoincrement())
  profilePic   String?
  fullName     String
  dateOfBirth  DateTime
  gender       Gender
  relationship Relationship
  parentName   String
  parentEmail  String?       @unique
  parentPassword String?
  site         Site

  // Parent relationship (optional - for future use)
  parentId     String?
  parent       User?        @relation("ParentChildren", fields: [parentId], references: [id])

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  servantId Int?
  servant   Servant? @relation(fields: [servantId], references: [id])

  roomId Int?
  room   Room? @relation(fields: [roomId], references: [id])

  childInfoFile String?
  option        String

  attendances Attendance[]
  reports     Report[]
  eventParticipations EventParticipation[]
  activities Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Relationship {
  FATHER
  MOTHER
  OTHER
}

enum Site {
  HEADOFFICE
  OPERATION
}

enum OrganizationType {
  INSA
  AI
  MINISTRY_OF_PEACE
  FINANCE_SECURITY
}

model Servant {
  id               Int      @id @default(autoincrement())
  fullName         String
  email            String?
  phone            String
  medicalReport    String?
  assignedRoomId   Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  canTransferRooms Boolean  @default(false)
  site             Site
  organizationType OrganizationType

  assignedRoom Room?   @relation(fields: [assignedRoomId], references: [id])
  children     Child[] // inverse relation for Child.servant
}

model Organization {
  id        Int              @id @default(autoincrement())
  name      String
  type      OrganizationType
  rooms     Room[]
  children  Child[] // inverse relation for Child.organization
  createdAt DateTime         @default(now())
}

model Room {
  id             Int           @id @default(autoincrement())
  name           String
  ageRange       String
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  servants       Servant[]
  children       Child[] // inverse relation for Child.room
}

model Attendance {
  id           Int       @id @default(autoincrement())
  childId      Int
  status       String // present, absent, late
  checkInTime  DateTime?
  checkOutTime DateTime?
  broughtBy    String?
  takenBy      String?
  createdAt    DateTime  @default(now())

  child Child @relation(fields: [childId], references: [id])
}

model Report {
  id        Int      @id @default(autoincrement())
  childId   Int
  title     String
  content   String
  createdAt DateTime @default(now())
  child     Child    @relation(fields: [childId], references: [id])
}

model EnrollmentRequest {
  id                 Int       @id @default(autoincrement())
  parentName         String
  childName          String
  childAge           Int
  email              String
  phone              String?
  preferredStartDate DateTime?
  status             String    @default("pending")
  notes              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Announcement {
  id                Int      @id @default(autoincrement())
  title             String
  content           String
  type              AnnouncementType @default(GENERAL)
  isActive          Boolean  @default(true)
  visibilityDays    Int?     // Number of days the announcement should be visible (null = permanent)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  views             AnnouncementView[]
}

model AnnouncementView {
  id              Int         @id @default(autoincrement())
  announcementId  Int
  userId          String?     // Optional - can track by user ID if logged in
  userEmail       String?     // Optional - can track by email
  viewedAt        DateTime    @default(now())

  announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([announcementId, userId])
  @@unique([announcementId, userEmail])
}

enum AnnouncementType {
  GENERAL
  IMPORTANT
  EVENT
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  eventDate   DateTime
  eventType   EventType
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participations EventParticipation[]
}

enum EventType {
  BIRTHDAY
  HOLIDAY
  EDUCATIONAL
  SPORTS
  CULTURAL
  OTHER
}

model EventParticipation {
  id        Int     @id @default(autoincrement())
  childId   Int
  eventId   Int
  status    ParticipationStatus @default(REGISTERED)
  notes     String?
  createdAt DateTime @default(now())

  child Child @relation(fields: [childId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([childId, eventId])
}

enum ParticipationStatus {
  REGISTERED
  ATTENDED
  ABSENT
  CANCELLED
}

model Activity {
  id          Int      @id @default(autoincrement())
  childId     Int
  title       String
  description String?
  activityType ActivityType
  date        DateTime
  duration    Int?     // Duration in minutes
  notes       String?
  images      String[] // Array of image file paths
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  child Child @relation(fields: [childId], references: [id], onDelete: Cascade)
}

enum ActivityType {
  LEARNING
  PLAY
  MEAL
  NAP
  OUTDOOR
  ART
  MUSIC
  STORY
  EXERCISE
  OTHER
}
