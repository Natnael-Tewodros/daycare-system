generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
}

model Child {
  id           Int          @id @default(autoincrement())
  profilePic   String?
  fullName     String
  dateOfBirth  DateTime
  gender       Gender
  relationship Relationship
  parentName   String
  site         Site

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  servantId Int?
  servant   Servant? @relation(fields: [servantId], references: [id])

  roomId Int?
  room   Room? @relation(fields: [roomId], references: [id])

  childInfoFile String?
  option        String

  attendances Attendance[]
  reports     Report[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Relationship {
  FATHER
  MOTHER
  OTHER
}

enum Site {
  INSA
  OPERATION
}

enum OrganizationType {
  INSA
  AI
  MINISTRY_OF_PEACE
  FINANCE_SECURITY
}

model Servant {
  id               Int      @id @default(autoincrement())
  fullName         String
  email            String
  phone            String
  medicalReport    String?
  assignedRoomId   Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  canTransferRooms Boolean  @default(false)

  assignedRoom Room?   @relation(fields: [assignedRoomId], references: [id])
  children     Child[] // inverse relation for Child.servant
}

model Organization {
  id        Int              @id @default(autoincrement())
  name      String
  type      OrganizationType
  rooms     Room[]
  children  Child[] // inverse relation for Child.organization
  createdAt DateTime         @default(now())
}

model Room {
  id             Int           @id @default(autoincrement())
  name           String
  ageRange       String
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  servants       Servant[]
  children       Child[] // inverse relation for Child.room
}

model Attendance {
  id           Int       @id @default(autoincrement())
  childId      Int
  status       String // present, absent, late
  checkInTime  DateTime?
  checkOutTime DateTime?
  broughtBy    String?
  takenBy      String?
  createdAt    DateTime  @default(now())

  child Child @relation(fields: [childId], references: [id])
}

model Report {
  id        Int      @id @default(autoincrement())
  childId   Int
  title     String
  content   String
  createdAt DateTime @default(now())
  child     Child    @relation(fields: [childId], references: [id])
}

model EnrollmentRequest {
  id                 Int       @id @default(autoincrement())
  parentName         String
  childName          String
  childAge           Int
  email              String    @unique
  phone              String?
  preferredStartDate DateTime?
  status             String    @default("pending")
  notes              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}
